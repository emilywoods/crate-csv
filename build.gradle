group 'io.crate'
version '1.3-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'

archivesBaseName = 'crate-csv'
group = 'io.crate'
description = 'Crate.IO CSV Import Plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

ext {
    crate_version = '2.1.6'
}

ext {
    downloadDir = new File(rootDir, 'downloads')
}


configurations {
    dependency
    compile.extendsFrom dependency
}

dependencies {
    compile fileTree(dir: 'parts/crate/lib/', include: ['*.jar'])
    compile fileTree(dir: 'parts/crate/lib/sigar/', include: ['*.jar'])
    runtime fileTree(dir: 'parts/crate/lib/', include: ['*.jar'])
    runtime fileTree(dir: 'parts/crate/lib/sigar/', include: ['*.jar'])

    dependency 'org.apache.commons:commons-compress:1.10'

    testCompile group: 'junit', name: 'junit', version: '4.11'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile ('junit:junit:4.11') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/*.Plugin'
        }
    }
    test {
        resources {
            srcDir 'src/test/java'
            include '**/*.gz'
        }
    }
}

def download (String url, String name){
    downloadDir.mkdirs()
    def dest = new File(downloadDir, name)
    ant.get(
            src: url,
            verbose: true,
            usetimestamp: true,
            skipexisting: false,
            dest: dest
    )
    return dest;
}

def extractTopfolder(File src, String trg){
    // delete target folder. Otherwise old files will stick around and lead to strange errors
    new File(trg).delete()

    copy {
        includeEmptyDirs = false
        FileTree ft
        if(src.name.endsWith('.zip')) {
            ft = zipTree(src)
        }
        if(src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile { details ->
                details.path =
                        details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}

task downloadCrateRelease << {
    def dest = download(
            "https://cdn.crate.io/downloads/releases/crate-${crate_version}.tar.gz",
            "crate.tar.gz")
    extractTopfolder(dest, 'parts/crate')
}

task deleteCrateDownloadFolder(type: Delete) {
    delete "${project.rootDir}/parts/crate"
}

task copyJarToCrateClasspath(type: Copy, dependsOn: [jar, downloadCrateRelease]) {
    from(jar)
    into "${project.rootDir}/parts/crate/lib"
}

jar {
    from configurations.dependency.collect {
        it.isDirectory() ? it : zipTree(it).matching{
            exclude 'META-INF/**'
        }
    }
    from sourceSets.main.output
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.io copy from CSV plugin", "Implementation-Version": project.version)
        }
    }
}



test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }
}


clean {
    dependsOn deleteCrateDownloadFolder
}

compileJava {
    dependsOn downloadCrateRelease
}


idea {
    project {
        languageLevel = 'JDK_1_8'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
            }
        }
    }

    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            // add Crate application configuration
            def crateApp = runManager.configuration.find { it.@name == 'Crate' && it.@type == 'Application' }
            if (crateApp == null) {
                runManager.append(new XmlParser().parse(file("idea/crateApp.xml")))
            }
        }
    }
}
